<style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f2f2f2; /* Light background color */
      color: #333; /* Dark text color */
      padding: 0;
      margin: 0;
      transition: background-color 0.3s;
    }

    .header {
      background-color: #f7f7f7; /* Light background color */
      padding: 20px;
      text-align: center;
    }

    .header-title {
      font-size: 24px;
      font-weight: bold;
      margin: 0;
    }

    .sidebar {
      background-color: #f0f0f0; /* Light background color */
      padding: 20px;
      width: 200px;
      height: 100vh;
      position: fixed;
      left: 0;
      top: 0;
      transition: width 0.3s;
    }

    .sidebar-icon {
      margin-bottom: 20px;
    }

    .sidebar.collapsed {
      width: 60px;
    }

    .sidebar ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }

    .sidebar li {
      margin-bottom: 10px;
    }

    .sidebar a {
      text-decoration: none;
      color: #333; /* Dark text color */
      display: block;
      transition: opacity 0.3s;
    }

    .sidebar.collapsed a {
      opacity: 0;
    }

    .board {
      display: flex;
      justify-content: space-between;
      margin-left: 200px;
      padding: 20px;
      transition: margin-left 0.3s;
    }

    .column {
      flex-grow: 1;
      padding: 10px;
      background-color: #fff; /* Light background color */
      border-radius: 5px;
      margin-right: 10px;
      position: relative;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Box shadow for cards */
    }

    .column-header {
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .card {
      padding: 10px;
      background-color: #f9f9f9; /* Light background color */
      border-radius: 5px;
      margin-bottom: 10px;
      color: #333; /* Dark text color */
      position: relative;
    }

    .card-title {
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 5px;
    }

    .card-description {
      font-size: 14px;
    }

    .card-button {
      padding: 5px 10px;
      background-color: #eee; /* Light background color */
      color: #333; /* Dark text color */
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s;
      position: absolute;
      top: 10px;
      right: 10px;
    }

    .card-button:hover {
      background-color: #ddd; /* Lighter background color on hover */
    }

    .profile {
      background-color: #f9f9f9; /* Light background color */
      position: fixed;
      top: 20px;
      right: 20px;
      display: flex;
      align-items: center;
    }

    .profile-icon {
      font-size: 20px;
      margin-right: 5px;
    }

    .profile-name {
      font-size: 16px;
      font-weight: bold;
    }

    .profile-email {
      font-size: 14px;
      text-decoration: underline;
      cursor: pointer;
    }

    .perfil {
      color: #333; /* Dark text color */
    }



    <!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style_kanban.css') }}">
  <title>Tela Kanban</title>
  <document>kanban</document>
</head>
<body> <!-- Starting with dark theme by default -->
  <div class="header">
    <h1 class="header-title">{{ kanban.name }}</h1>

    <div class="profile">
      <div class="profile-icon"><i class="glyphicon glyphicon-user"></i></div>
      <div class="profile-info">
        <!-- Usar as propriedades do objeto 'user' para exibir as informações do usuário -->
      <div class="profile-name"><a class="perfil" href="perfil">{{ user.nome }}</a></div>
      <div class="profile-email"><a class="perfil" href="perfil">{{ user.email }}</a></div>
      </div>
      <i class="material-icons"><a class="logout" href="logout">logout</a></i>
    </div>
  </div>

  <div class="sidebar" id="sidebar">
    <div class="sidebar-icon" onclick="toggleSidebar()">&#9776;</div>
    <ul>
      <li><i class="bi bi-columns-gap"></i><a href="backlog">backlog</a></li>
      <li><i class="bi bi-people"></i><a href="member">Membros</a></li>
      <li><a href="#">Página 3</a></li>
      <li><a href="#">Página 4</a></li>
    </ul>
  </div>

  <div class="board">
    <!-- Coluna Backlog -->
    <div class="column" ondragover="allowDrop(event)" ondrop="dropCard(event)">
      <div class="column-header">backlog</div>
      <!-- Loop pelas tarefas do Backlog -->
      {% for kanbancard in backlog_tasks %}
      <div class="card" id="{{ kanbancard.id }}" draggable="true" ondragstart="dragCard(event)">
        <div class="card-title">{{ kanbancard.title }}</div>
        <div class="card-description">{{ kanbancard.description }}</div>
        <button class="card-button" onclick="removerTarefa(this)", data-task-id="{{ kanbancard.id }}">Remover</button>
        <button class="card-button_edit" onclick="editCard(this)" data-task-id="{{ kanbancard.id }}">Editar</button>
      </div>
      {% endfor %}
      <button class="card-button-adicionar" onclick="adicionarTarefa(this.parentNode)">Adicionar Nova Tarefa</button>
    </div>

    <!-- Repita o mesmo padrão para as outras colunas -->
    
    <!-- Coluna A fazer -->
    <div class="column" ondragover="allowDrop(event)" ondrop="dropCard(event)">
      <div class="column-header">A fazer</div>
      {% for kanbancard in a_fazer_tasks %}
      <div class="card" id="{{ kanbancard.id }}" draggable="true" ondragstart="dragCard(event)">
        <div class="card-title">{{ kanbancard.title }}</div>
        <div class="card-description">{{ kanbancard.description }}</div>
        <button class="card-button" onclick="removerTarefa(this)", data-task-id="{{ kanbancard.id }}">Remover</button>
        <button class="card-button_edit" onclick="editCard(this)" data-task-id="{{ kanbancard.id }}">Editar</button>
      </div>
      {% endfor %}
    </div>

    <!-- Coluna Em andamento -->
    <div class="column" ondragover="allowDrop(event)" ondrop="dropCard(event)">
      <div class="column-header">Em andamento</div>
      <!-- Loop pelas tarefas do Backlog -->
      {% for kanbancard in em_andamento_tasks %}
      <div class="card" id="{{ kanbancard.id }}" draggable="true" ondragstart="dragCard(event)">
        <div class="card-title">{{ kanbancard.title }}</div>
        <div class="card-description">{{ kanbancard.description }}</div>
        <button class="card-button" onclick="removerTarefa(this)", data-task-id="{{ kanbancard.id }}">Remover</button>
        <button class="card-button_edit" onclick="editCard(this)" data-task-id="{{ kanbancard.id }}">Editar</button>
      </div>
      {% endfor %}
    </div>

    <!-- Repita o mesmo padrão para as outras colunas -->
    
    <!-- Coluna Concluído -->
    <div class="column" ondragover="allowDrop(event)" ondrop="dropCard(event)">
      <div class="column-header">concluido</div>
      {% for kanbancard in concluido_tasks %}
      <div class="card" id="{{ kanbancard.id }}"  draggable="true" ondragstart="dragCard(event)">
        <div class="card-title">{{ kanbancard.title }}</div>
        <div class="card-description">{{ kanbancard.description }}</div>
        <button class="card-button" onclick="removerTarefa(this)", data-task-id="{{ kanbancard.id }}">Remover</button>
        <button class="card-button_edit" onclick="editCard(this)" data-task-id="{{ kanbancard.id }}">Editar</button>
      </div>
      {% endfor %}
    </div>
  </div>




</body>
<script>
  // Obtém elementos DOM necessários
  let sidebar = document.getElementById('sidebar');
  let board = document.querySelector('.board');

  // Função para alternar a barra lateral
  function toggleSidebar() {
    sidebar.classList.toggle('collapsed'); // Alterna a classe 'collapsed' na barra lateral
    board.classList.toggle('expanded'); // Alterna a classe 'expanded' no quadro
  }

  // Função para permitir a operação de soltar (drop) de cartões
  function allowDrop(event) {
    event.preventDefault(); // Impede o comportamento padrão de soltar elementos
  }

  // Função para iniciar a operação de arrastar cartões
  function dragCard(event) {
    event.dataTransfer.setData("text/plain", event.target.id); // Define os dados a serem arrastados
  }

  // Função para soltar um cartão em uma coluna
  function dropCard(event) {
    event.preventDefault(); // Impede o comportamento padrão de soltar elementos
    let cardId = event.dataTransfer.getData("text/plain"); // Obtém o ID do cartão arrastado
    let targetColumn = event.target.closest('.column'); // Encontra a coluna de destino

    if (targetColumn && cardId) {
      targetColumn.appendChild(document.getElementById(cardId)); // Move o cartão para a coluna de destino

      // Obtém o novo status da tarefa a partir do cabeçalho da coluna
      let newStatus = targetColumn.querySelector('.column-header').textContent;

      // Atualiza o status da tarefa no banco de dados
      fetch('/mover_tarefa/' + cardId + '/' + newStatus, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          cardId: cardId,
          newStatus: newStatus
        })
      })
    }
  }

  function editCard(button) {
    // Obtém o ID da tarefa associado ao botão clicado
    let cardId = button.getAttribute('data-task-id');

    // Obtém os dados atuais da tarefa (título e descrição) do cartão
    let card = document.getElementById(cardId);
    let currentTitle = card.querySelector('.card-title').textContent;
    let currentDescription = card.querySelector('.card-description').textContent;

    // Pede ao usuário que insira os novos valores para o título e descrição
    let newTitle = prompt("Digite o novo título da tarefa:", currentTitle);
    let newDescription = prompt("Digite a nova descrição da tarefa:", currentDescription);

    // Verifica se o usuário inseriu novos valores e se o botão Cancelar não foi pressionado
    if (newTitle !== null && newDescription !== null) {
      // Atualiza os dados no cartão
      card.querySelector('.card-title').textContent = newTitle;
      card.querySelector('.card-description').textContent = newDescription;

      // Faça uma solicitação AJAX para atualizar os dados no servidor
      fetch(`/edit_task/${cardId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          newTitle: newTitle,
          newDescription: newDescription
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.message) {
          // A tarefa foi atualizada com sucesso no servidor
          alert("Tarefa atualizada com sucesso!");
        } else {
          // Ocorreu um erro ao atualizar a tarefa no servidor
          alert("Erro ao atualizar a tarefa.");
        }
      });
    }
  }

  // Função para adicionar uma nova tarefa a uma coluna
  function adicionarTarefa(column) {
    let cardTitle = prompt("Digite o título da tarefa:");
    let cardDescription = prompt("Digite a descrição da tarefa:");

    if (cardTitle && cardDescription) {
      // Crie uma nova tarefa no front-end
      let cardId = Date.now();
      let card = criarCard(cardId, cardTitle, cardDescription);

      // Adicione a nova tarefa ao banco de dados
      fetch('/adicionar_tarefa', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          title: cardTitle,
          description: cardDescription,
          status: column.querySelector('.column-header').textContent
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // A tarefa foi adicionada com sucesso, agora a incluímos no quadro
          column.insertBefore(card, column.lastChild);
        } else {
          alert("Erro ao adicionar a tarefa.");
        }
      });
    }
  }

  // Função para criar um novo cartão de tarefa
  function criarCard(id, title, description) {
    let card = document.createElement('div');
    card.id = id;
    card.className = 'card';
    card.draggable = true;
    card.ondragstart = dragCard;

    let cardTitleElement = document.createElement('div');
    cardTitleElement.className = 'card-title';
    cardTitleElement.textContent = title;

    let cardDescriptionElement = document.createElement('div');
    cardDescriptionElement.className = 'card-description';
    cardDescriptionElement.textContent = description;

    let cardButton_remove = document.createElement('button');
    cardButton.className = 'card-button';
    cardButton.textContent = 'Remover';
    cardButton.onclick = function () {
      removerTarefa(this);
    };

    let cardbutton_edit = document.createElement('button');
    cardButton.className = 'card-button';
    cardButton.textContent = 'editar';
    cardButton.onclick = function () {
      editCard(this);
    };

    card.appendChild(cardTitleElement);
    card.appendChild(cardDescriptionElement);
    card.appendChild(cardButton);

    return card;
  }

  function removerTarefa(button) {
    let card = button.parentNode;
    let column = card.parentNode;
    let task_id = button.getAttribute('data-task-id'); // Obtenha o ID da tarefa

    // Faça uma solicitação para remover a tarefa do banco de dados
    fetch('/remover_tarefa/' + task_id, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.message) {
        // A tarefa foi removida com sucesso do banco de dados, agora a removemos da interface
        column.removeChild(card);
      } else {
        alert("Erro ao remover a tarefa.");
      }
    });
  }

  // Função de logout (mostrando um alerta de logout)
  function logout() {
    alert("Logout realizado com sucesso!");
  }
</script>
</html>